
Project 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008ef  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003e7  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003ea  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001b4  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000233  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000006f1  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  6c:	23 e0       	ldi	r18, 0x03	; 3
  6e:	23 bf       	out	0x33, r18	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.0001);
  70:	3c e9       	ldi	r19, 0x9C	; 156

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  72:	08 c0       	rjmp	.+16     	; 0x84 <wait_avr+0x18>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.0001);
  74:	32 bf       	out	0x32, r19	; 50
    SET_BIT(TIFR, TOV0);
  76:	28 b7       	in	r18, 0x38	; 56
  78:	21 60       	ori	r18, 0x01	; 1
  7a:	28 bf       	out	0x38, r18	; 56
    WDR();
  7c:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	00 fe       	sbrs	r0, 0
  82:	fd cf       	rjmp	.-6      	; 0x7e <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	b0 f7       	brcc	.-20     	; 0x74 <wait_avr+0x8>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.0001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  88:	13 be       	out	0x33, r1	; 51
  8a:	08 95       	ret

0000008c <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  8c:	66 23       	and	r22, r22
  8e:	11 f0       	breq	.+4      	; 0x94 <output+0x8>
  90:	c0 9a       	sbi	0x18, 0	; 24
  92:	01 c0       	rjmp	.+2      	; 0x96 <output+0xa>
  94:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
  96:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
  98:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  9e:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  a0:	00 00       	nop
  NOP();
  a2:	00 00       	nop
  NOP();
  a4:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
  a6:	c2 98       	cbi	0x18, 2	; 24
  a8:	08 95       	ret

000000aa <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  aa:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
  ac:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  ae:	11 ba       	out	0x11, r1	; 17
  return PIND;
  b0:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  b2:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  b4:	00 00       	nop
  NOP();
  b6:	00 00       	nop
  NOP();
  b8:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  ba:	11 ba       	out	0x11, r1	; 17
  return PIND;
  bc:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
  be:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
  c0:	99 23       	and	r25, r25
  c2:	9c f3       	brlt	.-26     	; 0xaa <write>
  output(c, rs);
  c4:	0e 94 46 00 	call	0x8c	; 0x8c <output>
  c8:	08 95       	ret

000000ca <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
  ca:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
  cc:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
  ce:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
  output(0x30, 0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	0e 94 46 00 	call	0x8c	; 0x8c <output>
  wait_avr(5);
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
  output(0x30, 0);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	80 e3       	ldi	r24, 0x30	; 48
  ec:	0e 94 46 00 	call	0x8c	; 0x8c <output>
  wait_avr(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
  write(0x3c, 0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8c e3       	ldi	r24, 0x3C	; 60
  fc:	0e 94 55 00 	call	0xaa	; 0xaa <write>
  write(0x0c, 0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 55 00 	call	0xaa	; 0xaa <write>
  write(0x06, 0);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 55 00 	call	0xaa	; 0xaa <write>
  write(0x01, 0);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 55 00 	call	0xaa	; 0xaa <write>
 118:	08 95       	ret

0000011a <clr_lcd>:
}

void
clr_lcd(void)
{
  write(0x01, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <write>
 122:	08 95       	ret

00000124 <pos_lcd>:
}

void
pos_lcd(unsigned char r, unsigned char c)
{
 124:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
 126:	c6 2f       	mov	r28, r22
 128:	98 e2       	ldi	r25, 0x28	; 40
 12a:	89 9f       	mul	r24, r25
 12c:	c0 0d       	add	r28, r0
 12e:	11 24       	eor	r1, r1
  write(0x02, 0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 55 00 	call	0xaa	; 0xaa <write>
  while (n--) {
 138:	cc 23       	and	r28, r28
 13a:	31 f0       	breq	.+12     	; 0x148 <pos_lcd+0x24>
    write(0x14, 0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	84 e1       	ldi	r24, 0x14	; 20
 140:	0e 94 55 00 	call	0xaa	; 0xaa <write>
 144:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 146:	d1 f7       	brne	.-12     	; 0x13c <pos_lcd+0x18>
    write(0x14, 0);
  }
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:
	}
}

int main(void)
{
	DDRA = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8a bb       	out	0x1a, r24	; 26
	ini_lcd();
 150:	0e 94 65 00 	call	0xca	; 0xca <ini_lcd>
	clr_lcd();
 154:	0e 94 8d 00 	call	0x11a	; 0x11a <clr_lcd>
	pos_lcd(0,0);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 92 00 	call	0x124	; 0x124 <pos_lcd>
		}
		play_song(SONG, 1);
	}
	*/

 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
